 application {
  config {
    baseName shop,
    applicationType gateway,
    packageName com.jhipster.bachelor.store,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    cacheProvider hazelcast,
    enableTranslation false,
  }
  entities *
}

application {
  config {
    baseName orders,
    applicationType microservice,
    packageName com.jhipster.bachelor.orders,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    cacheProvider hazelcast,
    serverPort 8081,
    prodDatabaseType mysql,
  }
  entities ProductOrder, Basket, CompleteOrder
}

application {
  config {
    baseName ratings,
    applicationType microservice,
    packageName com.jhipster.bachelor.ratings,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    cacheProvider hazelcast,
    serverPort 8082,
    prodDatabaseType mysql,
  }
  entities Rating
}

application {
  config {
    baseName invoices,
    applicationType microservice,
    packageName com.jhipster.bachelor.invoices,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    cacheProvider hazelcast,
    serverPort 8083,
    prodDatabaseType mysql,
  }
  entities Invoice
}

application {
  config {
    baseName customers,
    applicationType microservice,
    packageName com.jhipster.bachelor.customers,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    cacheProvider hazelcast,
    serverPort 8084,
    prodDatabaseType mysql,
  }
  entities Customer
}

application {
  config {
    baseName inventory,
    applicationType microservice,
    packageName com.jhipster.bachelor.inventory,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    cacheProvider hazelcast,
    serverPort 8085,
    prodDatabaseType mysql,
  }
  entities Product, ProductCategory
}

entity Customer{
	name String 
	email String
    address String
}

service Customer with serviceClass
microservice Customer with customers

entity Product {
    name String required
    description String
    price Double required min(0)
    image String
    productOrderId Long
}

entity ProductCategory {
    name String required
}

service Product, ProductCategory with serviceClass
microservice Product, ProductCategory with ivnentory

entity CompleteOrder {
	invoiceId Long
    status OrderStatus
    customerId Long
    totalPrice Double
    orderDate String	
}


entity ProductOrder {
    amount Integer
    customerId Long
  	productId Long
    orderId Long
    basketId Long
}

entity Basket {
    customerId Long
}

enum OrderStatus {
    COMPLETED, PENDING, CANELLED
}

relationship ManyToOne{
	Product to ProductCategory
    ProductOrder to CompleteOrder
    ProductOrder to Basket
}

service ProductOrder, Basket, CompleteOrder with serviceClass
microservice ProductOrder, CompleteOrder, Basket with orders

entity Rating{
    points Integer required min(1) max(10)
    productId Long
    customerId Long
    description String required
}

service Rating with serviceClass
microservice Rating with ratings

entity Invoice {
    code String 
    status InvoiceStatus required
    dueDate String 
    paymentDate String
    amount Double 
  	customerId Long
    orderId Long
}

enum InvoiceStatus {
    PAID, PENDING, OVERDUE		
}

service Invoice with serviceClass
microservice Invoice with invoices
